{"version":3,"sources":["actions/projectActions.js","actions/types.js","components/Project/ProjectItem.js","components/Project/CreateProjectButton.js","components/Dashboard.js","securityUtils/setJWTToken.js","actions/securityActions.js","components/layout/Header.js","components/Project/AddProject.js","components/Project/UpdateProject.js","components/ProjectBoard/ProjectTasks/ProjectTask.js","actions/backlogActions.js","components/ProjectBoard/Backlog.js","components/ProjectBoard/ProjectBoard.js","components/ProjectBoard/ProjectTasks/AddProjectTask.js","components/ProjectBoard/ProjectTasks/UpdateProjectTask.js","components/layout/Landing.js","components/UserManagement/Register.js","components/UserManagement/Login.js","securityUtils/SecureRoute.js","reducers/errorReducer.js","reducers/projectReducer.js","reducers/backlogReducer.js","reducers/securityReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["createProject","project","history","dispatch","a","axios","post","push","type","payload","response","data","ProjectItem","onDeleteClick","id","props","deleteProject","this","console","log","className","projectIdentifier","projectName","description","to","onClick","bind","Component","connect","window","confirm","delete","CreateProjectButton","Fragment","Dashboard","getProjects","projects","map","key","state","get","res","setJWTToken","token","defaults","headers","common","logout","localStorage","removeItem","Header","location","href","headerLinks","security","validToken","user","userIsAuthenticated","fullName","userIsNotAuthenticated","data-toggle","data-target","AddProject","start_date","end_date","errors","onChange","onSubmit","nextProps","setState","e","target","name","value","preventDefault","newProject","classnames","placeholder","laceholder","UpdateProject","match","params","getProject","updateProject","disabled","ProjectTask","backlog_id","pt_id","deleteProjectTask","priorityString","priorityClass","project_task","priority","projectSequence","summary","acceptanceCriteria","Backlog","tasks","project_tasks_prop","todoItems","inProgressItems","doneItems","i","length","status","Projectboard","getBacklog","BoardContent","project_tasks","backlog","projectNotFound","role","boardAlgorithm","AddProjectTask","dueDate","newTask","addProjectTask","UpdateProjectTask","create_At","updateProjectTask","getProjectTask","patch","Landing","Register","username","password","confirmPassword","newUser","createNewUser","Login","LoginRequest","login","setItem","decoded","jwt_decode","component","otherProps","render","initialState","booleanActionPayload","combineReducers","action","filter","middleware","thunk","ReactReduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","store","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","jwtToken","decoded_jwtToken","currentTime","Date","now","exp","App","exact","path","ProjectBoard","Boolean","hostname","ReactDOM","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.86a4a683.chunk.js","sourcesContent":["\n\n\nimport axios from \"axios\";\n\nimport {GET_ERRORS,GET_PROJECTS,GET_PROJECT,DELETE_PROJECT} from \"./types\";\n\nexport const createProject = (project, history) =>async dispatch =>{\n    try{\n        const res = await axios.post(\"/api/project\",project);\n        history.push(\"/dashboard\")\n\n        dispatch({\n            type:GET_ERRORS,\n            payload:{}})\n    \n    }catch(error){\n        dispatch({\n            type:GET_ERRORS,\n            payload:error.response.data\n        })\n    }\n}\n\n\nexport const getProjects = () => async dispatch =>{\n    const res = await axios.get(\"/api/project/all\");\n    dispatch({\n        type: GET_PROJECTS,\n        payload:res.data\n    })\n}\n\nexport const getProject = (id,history) => async dispatch =>{\n    try{\n        const res = await axios.get(`/api/project/${id}`);\n        dispatch({\n            type: GET_PROJECT,\n            payload:res.data\n        })\n    }catch(error){\n        history.push(\"/dashboard\")\n    }\n    \n}\n\n\nexport const deleteProject = id => async dispatch =>{\n    if(window.confirm(\n        \"Are you sure? This will delete the project and all tata related to it.\"\n    )){\n        const res = await axios.delete(`/api/project/${id}`);\n        dispatch({\n            type: DELETE_PROJECT,\n            payload:id\n        })\n    }\n\n    \n}\n\n","export const GET_ERRORS = \"GET_ERRORS\";\nexport const GET_PROJECTS = \"GET_PROJECTS\";\nexport const GET_PROJECT = \"GET_PROJECT\";\nexport const DELETE_PROJECT = \"DELETE_PROJECT\";\n\n\n//Types for BACKLOG ACTIONS\n\nexport const GET_BACKLOG  = \"GET_BACKLOG\";\nexport const GET_PROJECT_TASK   = \"GET_PROJECT_TASK\";\nexport const DELETE_PROJECT_TASK  = \"DELETE_PROJECT_TASK\";\n\nexport const SET_CURRENT_USER   = \"SET_CURRENT_USER\";\n","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { deleteProject } from \"../../actions/projectActions\"\n\nclass ProjectItem extends Component {\n    onDeleteClick = id => {\n        this.props.deleteProject(id);\n    }\n\n    render() {\n        const { project } = this.props;\n        console.log(project);\n        return (\n\n            <div className=\"container\">\n                <div className=\"card card-body bg-light mb-3\">\n                    <div className=\"row\">\n                        <div className=\"col-2\">\n                            <span className=\"mx-auto\">{project.projectIdentifier}</span>\n                        </div>\n                        <div className=\"col-lg-6 col-md-4 col-8\">\n                            <h3>{project.projectName}</h3>\n                            <p>{project.description}</p>\n                        </div>\n                        <div className=\"col-md-4 d-none d-lg-block\">\n                            <ul className=\"list-group\">\n                                <Link to={`/projectBoard/${project.projectIdentifier}`} >\n                                    <li className=\"list-group-item board\">\n                                        <i className=\"fa fa-flag-checkered pr-1\">Project Board </i>\n                                    </li>\n                                </Link>\n                                <Link to={`/updateProject/${project.projectIdentifier}`}>\n                                    <li className=\"list-group-item update\">\n                                        <i className=\"fa fa-edit pr-1\">Update Project Info</i>\n                                    </li>\n                                </Link>\n                                <li className=\"list-group-item delete\"\n                                    onClick={this.onDeleteClick.bind(this,project.projectIdentifier)}\n                                >\n                                    <i className=\"fa fa-minus-circle pr-1\">Delete Project</i>\n                                </li>\n\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\nProjectItem.propTypes = {\n    deleteProject: PropTypes.func.isRequired\n}\nexport default connect(null, { deleteProject })(ProjectItem);","import React from 'react';\n\nimport { Link } from \"react-router-dom\";\n\nconst CreateProjectButton = () => {\n    return (\n        <React.Fragment>\n            <Link to=\"/addProject\" className=\"btn btn-lg btn-info\">\n                Create a Project\n        </Link>\n        </React.Fragment>\n    )\n}\n\nexport default CreateProjectButton;\n","import React, { Component } from 'react';\n\nimport ProjectItem from './Project/ProjectItem';\nimport CreateProjectButton from './Project/CreateProjectButton';\n\nimport { connect } from \"react-redux\";\nimport { getProjects } from \"../actions/projectActions\";\nimport PropsType from 'prop-types';\n\n\nclass Dashboard extends Component {\n    componentDidMount() {\n        this.props.getProjects();\n    }\n    render() {\n        const {projects} = this.props.project;\n        return (\n            <div className=\"projects\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <h1 className=\"display-4 text-center\">Projects</h1>\n                            {/* <br />\n                            <hr /> */}\n\n                            <CreateProjectButton/>\n                            <br />\n                            <hr /> \n                            {\n                                projects.map(project =>(\n                                    <ProjectItem  key={project.id} project ={project} />\n                                ))\n                            }\n                            \n                            {/* <br />\n                            <hr /> */}\n\n                            \n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nDashboard.propTypes = {\n    project: PropsType.object.isRequired,\n    getProjects: PropsType.func.isRequired\n}\nconst mapStateToProps = state => ({\n    project: state.project\n})\nexport default connect(mapStateToProps, { getProjects })(Dashboard);","import axios from \"axios\";\n\nconst setJWTToken = token =>{\n    if(token){\n        axios.defaults.headers.common[\"Authorization\"]=token;\n    }else{\n        delete axios.defaults.headers.common[\"Authorization\"];\n    }\n}\n\nexport default setJWTToken;","import axios from \"axios\";\nimport {GET_ERRORS, SET_CURRENT_USER} from './types';\nimport setJWTToken from \"../securityUtils/setJWTToken\";\nimport jwt_decode from \"jwt-decode\";\n\n\n\nexport const createNewUser = (newUser, history )=> async dispatch =>{\n    try{\n        await axios.post(\"/api/users/register\",newUser);\n        history.push(\"/login\");\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        });\n    }catch(err){\n        dispatch({\n            type:GET_ERRORS,\n            payload:err.response.data\n        });\n    }\n};\n\n\nexport const login = LoginRequest => async dispatch =>{\n    try{\n\n        const res = await axios.post(\"/api/users/login\",LoginRequest);\n        const {token }= res.data;\n        localStorage.setItem(\"jwtToken\",token);\n\n        setJWTToken(token);\n\n        const decoded = jwt_decode(token);\n\n\n        dispatch({\n            type: SET_CURRENT_USER,\n            payload: decoded \n        });\n    }catch(err ){\n        dispatch({\n            type:GET_ERRORS,\n            payload:err.response.data\n        });\n    }\n}\n\n\nexport const logout = ()=> dispatch =>{\n    localStorage.removeItem(\"jwtToken\"); \n    setJWTToken(false);\n\n    dispatch({\n        type: SET_CURRENT_USER,\n        payload: {} \n    });\n}","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logout } from \"../../actions/securityActions\";\n\n\nclass Header extends Component {\n    logout(){\n        this.props.logout();\n        window.location.href = \"/\";\n\n    }\n\n    render() {\n        const { validToken, user } = this.props.security;\n\n        const userIsAuthenticated = (\n            <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item\">\n                        <Link to=\"/dashboard\" className=\"nav-link\">\n                            Dashboard\n                        </Link>\n                    </li>\n                </ul>\n\n                <ul className=\"navbar-nav ml-auto\">\n                    <li className=\"nav-item\">\n                        <Link to=\"/dashboard\" className=\"nav-link \">\n                            <i className=\"fas fa-user-circle mr-1\"/>\n                            {user.fullName}\n                                </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link to=\"/logout\" \n                        onClick={this.logout.bind(this)}\n                        className=\"nav-link \">\n                            Logout\n                                </Link>\n                    </li>\n                </ul>\n            </div>\n        );\n\n        const userIsNotAuthenticated = (\n            <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n              \n                <ul className=\"navbar-nav ml-auto\">\n                    <li className=\"nav-item\">\n                        <Link to=\"/register\" className=\"nav-link \">\n                            Sign Up \n                                </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link to=\"/login\" className=\"nav-link \">\n                            Login \n                                </Link>\n                    </li>\n                </ul>\n            </div>\n        );\n        let headerLinks;\n\n        if(validToken && user ){\n            headerLinks = userIsAuthenticated;\n        }else{\n            headerLinks = userIsNotAuthenticated;\n        }\n\n\n        return (\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-4\">\n                <div className=\"container\">\n                    <Link to=\"/\" className=\"navbar-brand\">\n                        Personal Project Management Tool\n                    </Link>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mobile-nav\">\n                        <span className=\"navbar-toggler-icon\" />\n                    </button>\n                    {headerLinks}\n\n\n                </div>\n            </nav>\n        );\n    }\n}\nHeader.propTypes = {\n    logout: PropTypes.func.isRequired,\n    security: PropTypes.object.isRequired\n}\nconst mapStateToProps = state => ({\n    security: state.security\n})\nexport default connect(mapStateToProps, { logout })(Header);","import React, { Component } from 'react';\n\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {createProject} from \"../../actions/projectActions\";\nimport classnames from \"classnames\";\n\n\n\nclass AddProject extends Component {\n    constructor() {\n        super()\n        this.state = {\n\n            projectName: \"\",\n            projectIdentifier: \"\",\n            description: \"\",\n            start_date: \"\",\n            end_date: \"\",\n            errors: {}\n            \n        }\n        this.onChange= this.onChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n\n    }\n\n    //life cycle hooks\n\n    componentWillReceiveProps(nextProps){\n\n        if(nextProps.errors){\n            this.setState({errors:nextProps.errors});\n        }\n    }\n\n    onChange(e){\n        this.setState({[e.target.name] :e.target.value });\n\n    }\n\n    onSubmit(e){\n        e.preventDefault();\n        const newProject = {\n            \"projectName\": this.state.projectName,\n            \"projectIdentifier\": this.state.projectIdentifier,\n            \"description\": this.state.description,\n            \"start_date\": this.state.start_date,\n            \"end_date\": this.state.end_date \n        }\n        this.props.createProject(newProject,this.props.history);\n\n    }\n\n    render() {\n        const {errors } = this.state;\n\n        return (\n            <div>\n            <div className=\"project\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h5 className=\"display-4 text-center\">Create Project form</h5>\n                            <hr />\n                            <form onSubmit = {this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input type=\"text\" \n                                    className={classnames(\"form-control form-control-lg \",{\"is-invalid\":errors.projectName})}\n                                    placeholder=\"Project Name\" \n                                    onChange={this.onChange.bind(this)}\n                                    name=\"projectName\" value = {this.state.projectName}/>\n                                    {errors.projectName && (\n                                        <div className=\"invalid-feedback\">{errors.projectName}</div>\n                                    )}\n\n                                </div>\n                                <div className=\"form-group\">\n                                    <input type=\"text\" \n                                    className={classnames(\"form-control form-control-lg \",{\"is-invalid\":errors.projectIdentifier})}\n                                    laceholder=\"Unique Project ID\" \n                                    onChange={this.onChange.bind(this)}\n                                    name=\"projectIdentifier\" value = {this.state.projectIdentifier}\n                                    />\n                                    \n                                    {errors.projectName && (\n                                        <div className=\"invalid-feedback\">{errors.projectIdentifier}</div>\n                                    )}\n\n                                </div>\n                                {/* <!-- disabled for Edit Only!! remove \"disabled\" for the Create operation --> */}\n                                <div className=\"form-group\">\n                                    <textarea \n                                    className= {classnames(\"form-control form-control-lg \",{\"is-invalid\":errors.description})}\n                                    placeholder=\"Project Description\" \n                                    onChange={this.onChange.bind(this)}\n                                    name=\"description\" value = {this.state.description}/>\n                                    \n                                    {errors.projectName && (\n                                        <div className=\"invalid-feedback\">{errors.description}</div>\n                                    )}\n                                </div>\n                                <h6>Start Date</h6>\n                                <div className=\"form-group\">\n                                    <input type=\"date\" className=\"form-control form-control-lg\" \n                                    onChange={this.onChange.bind(this)}\n                                    name=\"start_date\" value = {this.state.start_date} />\n                                </div>\n                                <h6>Estimated End Date</h6>\n                                <div className=\"form-group\">\n                                    <input type=\"date\" className=\"form-control form-control-lg\" \n                                    onChange={this.onChange.bind(this)}\n                                    name=\"end_date\" value = {this.state.end_date} />\n                                </div>\n\n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            </div>\n\n        )\n    }\n}\n\nAddProject.propTypes = {\n    createProject : PropTypes.func.isRequired,\n    errors : PropTypes.object.isRequired\n}\n\n\nconst mapStateToProps = state =>({\n    errors: state.errors\n})\nexport default connect(mapStateToProps,{createProject})( AddProject);","import React, { Component } from 'react';\nimport { getProject , createProject} from \"../../actions/projectActions\";\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport classnames from \"classnames\";\n\nclass UpdateProject extends Component {\n    constructor(){\n        super();\n        this.state = {\n            id:\"\",\n            projectName:\"\",\n            projectIdentifier:\"\",\n            description:\"\",\n            start_date:\"\",\n            end_date:\"\",\n            errors:{}\n        };\n\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n\n    }\n    componentWillReceiveProps(nextProps){\n        if(nextProps.errors){\n            this.setState({errors:nextProps.errors});\n        }\n        const {id,\n        projectName,\n        projectIdentifier,\n        description,\n        start_date,\n        end_date} = nextProps.project;\n\n        this.setState({id,\n            projectName,\n            projectIdentifier,\n            description,\n            start_date,\n            end_date});\n    }\n    componentDidMount() {\n        const {id} = this.props.match.params;\n        this.props.getProject(id, this.props.history);\n    }\n    onChange(e){\n        this.setState({[e.target.name]:e.target.value});\n    }\n\n    onSubmit(e){\n        e.preventDefault();\n\n        const updateProject = {\n            id:this.state.id,\n            projectName:this.state.projectName,\n            projectIdentifier:this.state.projectIdentifier,\n            description:this.state.description,\n            start_date:this.state.start_date,\n            end_date:this.state.end_date\n        }\n\n        this.props.createProject(updateProject,this.props.history);\n    }\n    render() {\n        const {errors} = this.state;\n        return (\n            <div className=\"project\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h5 className=\"display-4 text-center\">Update Project form</h5>\n                            <hr />\n                            <form onSubmit = {this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input type=\"text\" \n                                    className={classnames(\"form-control form-control-lg \",\n                                    {\n                                        \"is-invalid\":errors.projectName\n                                    }\n                                    )} \n                                    placeholder=\"Project Name\" \n                                    onChange={this.onChange}\n                                    name=\"projectName\"\n                                    value={this.state.projectName}\n                                    />\n\n                                    {\n                                        errors.projectName && (\n                                            <div className=\"invalid-feedback\">{errors.projectName}</div>\n                                        )\n                                    }\n                                </div>\n                                <div className=\"form-group\">\n                                    <input type=\"text\" className=\"form-control form-control-lg\" placeholder=\"Unique Project ID\"\n                                        name=\"projectIdentifier\"\n                                        value={this.state.projectIdentifier}\n                                        onChange={this.onChange}\n\n                                        disabled />\n                                </div>\n                                {/* <!-- disabled for Edit Only!! remove \"disabled\" for the Create operation --> */}\n                                <div className=\"form-group\">\n                                    <textarea className=\"form-control form-control-lg\" \n                                    onChange={this.onChange}\n\n                                    placeholder=\"Project Description\"\n                                    name=\"description\"\n                                    value={this.state.description}\n                                    ></textarea>\n                                </div>\n                                <h6>Start Date</h6>\n                                <div className=\"form-group\">\n                                    <input type=\"date\" className=\"form-control form-control-lg\" \n                                    name=\"start_date\"\n                                    onChange={this.onChange}\n\n                                    value={this.state.start_date} />\n                                </div>\n                                <h6>Estimated End Date</h6>\n                                <div className=\"form-group\">\n                                    <input type=\"date\" className=\"form-control form-control-lg\" \n                                    name=\"end_date\"\n                                    onChange={this.onChange}\n\n                                     value = {this.state.end_date}/>\n                                </div>\n\n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n}\n\nUpdateProject.propTypes = {\n    getProject: PropTypes.func.isRequired,\n    createProject: PropTypes.func.isRequired,\n\n    project: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    project: state.project.project,\n    errors:state.errors \n})\nexport default connect(mapStateToProps, {getProject,createProject})(UpdateProject);\n","import React, { Component } from 'react';\nimport {Link} from 'react-router-dom';\nimport {deleteProjectTask} from \"../../../actions/backlogActions\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport classnames from \"classnames\";\n\n\nclass ProjectTask extends Component {\n    onDeleteClick(backlog_id,pt_id){\n        this.props.deleteProjectTask(backlog_id,pt_id);\n\n    }\n    render() {\n        const {project_task} = this.props;\n        let priorityString;\n        let priorityClass;\n\n        if(project_task.priority===1){\n            priorityClass=\"bg-danger text-light\"\n            priorityString=\"HIGH\"\n\n        }\n\n        if(project_task.priority===2){\n            priorityClass=\"bg-warning  text-light\"\n            priorityString=\"MEDIUM\"\n\n        }\n\n        if(project_task.priority===3){\n            priorityClass=\"bg-info  text-light\"\n            priorityString=\"LOW\"\n\n        }\n\n\n        return (\n            <div className =\"card mb-1 bg-light\">\n\n            <div className ={`card-header text-primary ${priorityClass}`}>\n                ID: {project_task.projectSequence} -- Priority: {priorityString} \n               \n            </div>\n            <div className =\"card-body bg-light\">\n                <h5 className =\"card-title\">{project_task.summary}</h5>\n                <p className =\"card-text text-truncate \">\n                    {project_task.acceptanceCriteria}\n                </p>\n                <Link to={`/updateProjectTask/${project_task.projectIdentifier}/${project_task.projectSequence}`} className =\"btn btn-primary\">\n                    View / Update\n                </Link>\n\n                <button className =\"btn btn-danger ml-4\" \n                onClick={this.onDeleteClick.bind(this,project_task.projectIdentifier,project_task.projectSequence)}>\n                    Delete\n                </button>\n            </div>\n        </div>\n\n        )\n    }\n}\nProjectTask.propTypes = {\n    deleteProjectTask : PropTypes.func.isRequired\n}\n\n\n// const mapStateToProps = state =>({\n//     errors: state.errors\n// })\n\nexport default connect(null,{deleteProjectTask})( ProjectTask);\n","import axios from \"axios\";\nimport {GET_ERRORS, GET_BACKLOG,GET_PROJECT_TASK, DELETE_PROJECT_TASK} from \"./types\";\n\n\n\nexport const addProjectTask = (\n    backlog_id, \n    project_task,\n    history \n) => async dispatch => {\n    try{\n        await axios.post(`/api/backlog/${backlog_id}`,project_task);\n        history.push(`/projectBoard/${backlog_id}`);\n\n        dispatch({\n            type:GET_ERRORS,\n            payload:{}\n        });\n\n    }catch(error ){\n        dispatch({\n            type:GET_ERRORS,\n            payload:error.response.data\n        });\n\n    }\n    \n};\n\nexport const getBacklog = backlog_id => async dispatch =>{\n    try{\n        const res = await axios.get(`/api/backlog/${backlog_id}`);\n        dispatch({\n            type: GET_BACKLOG,\n            payload: res.data \n        })\n\n    }catch(error){\n        dispatch({\n            type:GET_ERRORS,\n            payload:error.response.data\n        });\n\n    }\n}\n\nexport const getProjectTask = (backlog_id,pt_id,history) => async dispatch =>{\n    try{\n        const res = await axios.get(`/api/backlog/${backlog_id}/${pt_id}`);\n        dispatch({\n            type: GET_PROJECT_TASK,\n            payload: res.data \n        })\n\n    }catch(error){\n        // dispatch({\n        //     type:GET_ERRORS,\n        //     payload:error.response.data\n        // });\n        history.push(\"/hashboard\");\n    }\n}\n\n\n\n\n\nexport const updateProjectTask = (\n    backlog_id, \n    pt_id,\n    project_task,\n    history \n) => async dispatch => {\n    try{\n        await axios.patch(`/api/backlog/${backlog_id}/${pt_id}`,project_task);\n        history.push(`/projectBoard/${backlog_id}`);\n\n        dispatch({\n            type:GET_ERRORS,\n            payload:{}\n        });\n\n    }catch(error ){\n        dispatch({\n            type:GET_ERRORS,\n            payload:error.response.data\n        });\n\n    }\n    \n};\n\n\n\nexport const deleteProjectTask = (backlog_id,pt_id) => async dispatch =>{\n    if(window.confirm(`You are deleting project task ${pt_id}, this action cannot be undone`)){\n        await axios.delete(`/api/backlog/${backlog_id}/${pt_id}`);\n        dispatch({\n            type:DELETE_PROJECT_TASK,\n            payload:pt_id\n        });\n    }\n}\n\n\n\n\n","import React, { Component } from 'react'\n\nimport ProjectTask from \"./ProjectTasks/ProjectTask\";\n\nclass Backlog extends Component {\n    render() {\n\n        const {project_tasks_prop} = this.props;\n        const tasks = project_tasks_prop.map(project_task =>(\n            <ProjectTask key={project_task.id } project_task={project_task}/>     \n        ));\n\n\n        let todoItems = [];\n        let inProgressItems = [];\n        let doneItems = [];\n\n        for( let i = 0; i< tasks.length; i++){\n            if(tasks[i].props.project_task.status ===\"TO_DO\"){\n                todoItems.push(tasks[i]);\n            }\n            if(tasks[i].props.project_task.status ===\"IN_PROGRESS\"){\n                inProgressItems.push(tasks[i]);\n            }\n            if(tasks[i].props.project_task.status ===\"DONE\"){\n                doneItems.push(tasks[i]);\n            }\n        }\n        return (\n          \n            <div className =\"container\">\n            <div className =\"row\">\n                <div className =\"col-md-4\">\n                    <div className =\"card text-center mb-2\">\n                        <div className =\"card-header bg-secondary text-white\">\n                            <h3>TO DO</h3>\n                        </div>\n                    </div>\n\n                    {/* <ProjectTask/> */}\n                    {todoItems}\n\n                </div>\n                <div className =\"col-md-4\">\n                    <div className =\"card text-center mb-2\">\n                        <div className =\"card-header bg-primary text-white\">\n                            <h3>In Progress</h3>\n                        </div>\n                    </div>\n                    {inProgressItems}\n                </div>\n                <div className =\"col-md-4\">\n                    <div className =\"card text-center mb-2\">\n                        <div className =\"card-header bg-success text-white\">\n                            <h3>Done</h3>\n                        </div>\n                    </div>\n                    {doneItems}\n                </div>\n            </div>\n        </div>\n\n        )\n    }\n}\n\nexport default  Backlog ;\n","import React, { Component } from 'react';\n\nimport { Link } from \"react-router-dom\";\nimport Backlog from \"./Backlog\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { getBacklog } from \"../../actions/backlogActions\";\n\n\n\nclass Projectboard extends Component {\n    constructor() {\n        super()\n        this.state = {\n            errors: {}\n        };\n\n\n    }\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n            this.setState({ errors: nextProps.errors });\n        }\n    }\n\n    componentDidMount() {\n        const { id } = this.props.match.params;\n        this.props.getBacklog(id);\n    }\n    render() {\n        const { id } = this.props.match.params;\n        const { project_tasks } = this.props.backlog;\n        const { errors } = this.state;\n\n        let BoardContent;\n\n        const boardAlgorithm = (errors, project_tasks) => {\n            if (project_tasks.length < 1) {\n                if (errors.projectNotFound) {\n                    return (\n                        <div className=\"alert alert-danger text-center\" role=\"alert\">\n                            {errors.projectNotFound}\n                        </div>\n                    );\n                } else if (errors.projectIdentifier) {\n                    return (\n                        <div className=\"alert alert-danger text-center\" role=\"alert\">\n                            {errors.projectIdentifier}\n                        </div>\n                    );\n                }\n                else {\n                    return (\n                        <div className=\"alert alert-info  text-center\" role=\"alert\">\n                            No Project Tasks on this board.\n                        </div>);\n                }\n            }else{\n                return <Backlog project_tasks_prop={project_tasks}></Backlog>\n            }\n        }\n\n\n\n        BoardContent = boardAlgorithm(errors,project_tasks);\n\n\n\n\n        return (\n            <div className=\"container\">\n                <Link to={`/addProjectTask/${id}`} className=\"btn btn-primary mb-3\">\n                    <i className=\"fas fa-plus-circle\"> Create Project Task</i>\n                </Link>\n                <br />\n                <hr />\n                {/* <Backlog project_tasks_prop={project_tasks} /> */}\n                {BoardContent}\n\n            </div>\n        )\n    }\n}\n\nProjectboard.propTypes = {\n    backlog: PropTypes.object.isRequired,\n    getBacklog: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    backlog: state.backlog,\n    errors: state.errors\n})\nexport default connect(mapStateToProps, { getBacklog })(Projectboard);","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport { connect } from 'react-redux';\n\nimport classnames from 'classnames';\nimport { addProjectTask } from \"../../../actions/backlogActions\";\nimport PropTypes from \"prop-types\";\n\n\nclass AddProjectTask extends Component {\n    constructor(props) {\n\n        super(props);\n        const { id } = this.props.match.params;\n\n\n        this.state = {\n            summary: \"\",\n            acceptanceCriteria: \"\",\n            status: \"\",\n            priority: 0,\n            dueDate: \"\",\n            projectIdentifier: id,\n            errors:{}\n        }\n        this.onChange =this.onChange.bind(this);\n        this.onSubmit  =this.onSubmit.bind(this);\n\n\n    }\n    componentWillReceiveProps(nextProps){\n        if(nextProps.errors){\n            this.setState({errors:nextProps.errors});\n        }\n    }\n    onChange(e){\n        this.setState({[e.target.name]:e.target.value});\n    }\n\n    onSubmit(e){\n        e.preventDefault();\n        const newTask = {\n            summary: this.state.summary ,\n            acceptanceCriteria: this.state.acceptanceCriteria,\n            status: this.state.status,\n            priority: this.state.priority,\n            dueDate: this.state.dueDate\n        }\n\n        this.props.addProjectTask(this.state.projectIdentifier , newTask,this.props.history );\n    }\n    render() {\n        const { id } = this.props.match.params;\n        const {errors} = this.state;\n\n        return (\n            // <!-- CREATE / UPDATE PROJECT TASK FORM STARTS HERE -->\n\n\n            <div className=\"add-PBI\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <Link to={`/projectBoard/${id}`} className=\"btn btn-light\">\n                                Back to Project Board\n                            </Link>\n                            <h4 className=\"display-4 text-center\">Add Project Task</h4>\n                            <p className=\"lead text-center\">Project Name + Project Code</p>\n\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input type=\"text\" \n                                    className={classnames(\"form-control form-control-lg\",{\n                                        \"is-invalid\":errors.summary\n                                    }) }\n                                    name=\"summary\" \n                                    value = {this.state.summary }\n                                    onChange={this.onChange }\n                                    placeholder=\"Project Task summary\" />\n\n                                    {errors.projectName && (\n                                        <div className=\"invalid-feedback\">{errors.summary}</div>\n                                    )}\n                                </div>\n                                <div className=\"form-group\">\n                                    <textarea className=\"form-control form-control-lg\" \n                                    placeholder=\"Acceptance Criteria\" \n                                    onChange={this.onChange }\n\n                                    value = {this.state.acceptanceCriteria }\n\n                                    name=\"acceptanceCriteria\"></textarea>\n                                </div>\n                                <h6>Due Date</h6>\n                                <div className=\"form-group\">\n                                    <input type=\"date\" className=\"form-control form-control-lg\" \n                                    value = {this.state.dueDate }\n                                    onChange={this.onChange }\n\n                                    name=\"dueDate\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <select className=\"form-control form-control-lg\" \n                                    onChange={this.onChange }\n\n                                    value = {this.state.priority }\n\n                                    name=\"priority\">\n                                        <option value={0}>Select Priority</option>\n                                        <option value={1}>High</option>\n                                        <option value={2}>Medium</option>\n                                        <option value={3}>Low</option>\n                                    </select>\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <select className=\"form-control form-control-lg\" \n                                    onChange={this.onChange }\n\n                                    value = {this.state.status }\n                                    name=\"status\">\n                                        <option value=\"\">Select Status</option>\n                                        <option value=\"TO_DO\">TO DO</option>\n                                        <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                                        <option value=\"DONE\">DONE</option>\n                                    </select>\n                                </div>\n\n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            // <!-- CREATE / UPDATE PROJECT TASK FORM ENDS HERE -->\n\n        )\n    }\n}\nAddProjectTask.propTypes = {\n    addProjectTask: PropTypes.func.isRequired,\n    errors:PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state =>({\n    errors:state.errors\n});\nexport default connect(mapStateToProps, { addProjectTask })(AddProjectTask);","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport classnames from \"classnames\";\nimport { getProjectTask,updateProjectTask } from \"../../../actions/backlogActions\";\nimport PropTypes from \"prop-types\";\nimport {Link} from \"react-router-dom\";\n\nclass UpdateProjectTask extends Component {\n    constructor() {\n        super()\n        this.state = {\n            id: \"\",\n            projectSequence: \"\",\n            summary: \"\",\n            acceptanceCriteria: \"\",\n            status: \"\",\n            priority: \"\",\n            dueDate: \"\",\n            projectIdentifier: \"\",\n            create_At: \"\",\n            errors:{}\n\n        }\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    onChange(e){\n        this.setState({[e.target.name]:e.target.value});\n    }\n    onSubmit(e){\n        e.preventDefault();\n        const UpdateProjectTask = {\n            id: this.state.id,\n            projectSequence: this.state.projectSequence,\n            summary: this.state.summary,\n            acceptanceCriteria: this.state.acceptanceCriteria,\n            status: this.state.status,\n            priority: this.state.priority,\n            dueDate: this.state.dueDate,\n            projectIdentifier: this.state.projectIdentifier,\n            create_At: this.state.create_At\n        }\n        //console.log(UpdateProjectTask);\n        this.props.updateProjectTask(this.state.projectIdentifier,this.state.projectSequence,\n            UpdateProjectTask,\n            this.props.history\n            )\n    }\n    componentDidMount() {\n        const { backlog_id, pt_id } = this.props.match.params;\n        this.props.getProjectTask(backlog_id, pt_id, this.props.history);\n\n    }\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.errors){\n            this.setState({errors:nextProps.errors});\n        }\n\n        const {\n            id,\n            projectSequence,\n            summary,\n            acceptanceCriteria,\n            status,\n            priority,\n            dueDate,\n            projectIdentifier,\n            create_At\n        } = nextProps.project_task;\n\n        this.setState({\n            id,\n            projectSequence,\n            summary,\n            acceptanceCriteria,\n            status,\n            priority,\n            dueDate,\n            projectIdentifier,\n            create_At\n        })\n    }\n    render() {\n        const {errors} = this.state;\n        return (\n            <div className=\"add-PBI\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <Link  to ={`/projectBoard/${this.state.projectIdentifier}`} className=\"btn btn-light\">\n                                Back to Project Board\n                    </Link>\n                            <h4 className=\"display-4 text-center\">Update Project Task</h4>\n                            <p className=\"lead text-center\">Project Name: {this.state.projectIdentifier} | Project Task ID: {this.state.projectSequence}</p>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input type=\"text\" \n                                    className={classnames(\"form-control form-control-lg\",{\n                                        \"is-invalid\":errors.summary\n                                    })}\n                                    value = {this.state.summary} \n                                    onChange={this.onChange}\n                                    name=\"summary\" placeholder=\"Project Task summary\" />\n\n                                    {errors.summary && (\n                                        <div className=\"invalid-feedback\">{errors.summary}</div>\n                                    )}\n                                </div>\n                                <div className=\"form-group\">\n                                    <textarea className=\"form-control form-control-lg\" \n                                    value = {this.state.acceptanceCriteria} \n                                    onChange={this.onChange}\n\n                                    placeholder=\"Acceptance Criteria\" \n                                    name=\"acceptanceCriteria\"></textarea>\n                                </div>\n                                <h6>Due Date</h6>\n                                <div className=\"form-group\">\n                                    <input type=\"date\" className=\"form-control form-control-lg\" \n                                    value = {this.state.dueDate}\n                                    onChange={this.onChange}\n\n                                    name=\"dueDate\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <select className=\"form-control form-control-lg\" \n                                    value = {this.state.priority}\n                                    \n                                    onChange={this.onChange}\n\n                                    name=\"priority\">\n                                        <option value={0}>Select Priority</option>\n                                        <option value={1}>High</option>\n                                        <option value={2}>Medium</option>\n                                        <option value={3}>Low</option>\n                                    </select>\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <select className=\"form-control form-control-lg\" \n                                    onChange={this.onChange}\n\n                                    value = {this.state.status}\n                                    name=\"status\">\n                                        <option value=\"\">Select Status</option>\n                                        <option value=\"TO_DO\">TO DO</option>\n                                        <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                                        <option value=\"DONE\">DONE</option>\n                                    </select>\n                                </div>\n\n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nUpdateProjectTask.propTypes = {\n    getProjectTask: PropTypes.func.isRequired,\n    project_task: PropTypes.object.isRequired,\n    updateProjectTask: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n\n\n\n}\nconst mapStateToProps = state => ({\n    project_task: state.backlog.project_task,\n    errors:state.errors\n\n})\n\nexport default connect(mapStateToProps, { getProjectTask,updateProjectTask })(UpdateProjectTask);\n","import React, { Component } from 'react';\nimport {Link } from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nclass Landing extends Component {\n    componentDidMount(){\n        if(this.props.security.validToken){\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n    render() {\n        return (\n\n            <div className=\"landing\">\n                <div className=\"light-overlay landing-inner text-dark\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12 text-center\">\n                                <h1 className=\"display-3 mb-4\">Personal Project Management Tool</h1>\n                                <p className=\"lead\">\n                                    Create your account to join active projects or start your own\n                                </p>\n                                <hr />\n                                <Link to=\"/register\" className=\"btn btn-lg btn-primary mr-2\" href=\"register.html\">\n                                    Sign Up\n                                </Link>\n                                <Link to=\"/login\" className=\"btn btn-lg btn-secondary mr-2\" href=\"register.html\">\n                                    Login\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        \n        \n        )\n    }\n}\n\nLanding.propTypes={\n    security:PropTypes.object.isRequired\n}\nconst mapStateToProps = state => ({\n    security:state.security \n})\n\nexport default  connect(mapStateToProps) (Landing);","import React, { Component } from 'react';\nimport { createNewUser } from '../../actions/securityActions';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport classnames from \"classnames\";\n\n\n\nclass Register extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            username: \"\",\n            fullName: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n            errors: {}\n        }\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n\n\n    }\n    componentDidMount(){\n        if(this.props.security.validToken){\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n            this.setState({ errors: nextProps.errors });\n        }\n    }\n    onSubmit(e) {\n        e.preventDefault();\n        const newUser = {\n            username: this.state.username,\n            fullName: this.state.fullName,\n            password: this.state.password,\n            confirmPassword: this.state.confirmPassword\n        }\n        this.props.createNewUser(newUser, this.props.history);\n    }\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n    render() {\n        const { errors } = this.state;\n        return (\n            <div className=\"register\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Sign Up</h1>\n                            <p className=\"lead text-center\">Create your Account</p>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input type=\"text\" className={classnames(\"form-control form-control-lg\", {\n                                        \"is-invalid\": errors.fullName\n                                    })}\n                                        placeholder=\"Full Name\"\n                                        name=\"fullName\"\n                                        value={this.state.fullName}\n                                        onChange={this.onChange} />\n                                    {\n                                        errors.fullName && (\n                                            \n                                            <div className=\"invalid-feedback\">{errors.fullName}</div>\n                                        )\n                                    }\n                                </div>\n                                <div className=\"form-group\">\n                                    <input type=\"text\" className={classnames(\"form-control form-control-lg\", {\n                                        \"is-invalid\": errors.username\n                                    })}\n                                        placeholder=\"Email Address (Username)\"\n                                        name=\"username\"\n                                        onChange={this.onChange}\n                                        value={this.state.username} />\n                                        {\n                                        errors.username && (\n                                            \n                                            <div className=\"invalid-feedback\">{errors.username}</div>\n                                        )\n                                    }\n\n                                </div>\n                                <div className=\"form-group\">\n                                    <input type=\"password\" className={classnames(\"form-control form-control-lg\", {\n                                        \"is-invalid\": errors.password\n                                    })}\n                                        placeholder=\"Password\" name=\"password\"\n                                        onChange={this.onChange}\n                                        value={this.state.password} />\n                                        {\n                                        errors.password && (\n                                            \n                                            <div className=\"invalid-feedback\">{errors.password}</div>\n                                        )\n                                    }\n                                </div>\n                                <div className=\"form-group\">\n                                    <input type=\"password\" className={classnames(\"form-control form-control-lg\", {\n                                        \"is-invalid\": errors.confirmPassword\n                                    })}\n                                        placeholder=\"Confirm Password\"\n                                        name=\"confirmPassword\"\n                                        onChange={this.onChange}\n                                        value={this.state.confirmPassword} />\n                                        {\n                                        errors.confirmPassword && (\n                                            \n                                            <div className=\"invalid-feedback\">{errors.confirmPassword}</div>\n                                        )\n                                    }\n                                </div>\n                                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n}\nRegister.propTypes = {\n    createNewUser: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n    security:PropTypes.object.isRequired\n}\nconst mapStateToProps = state => ({\n    errors: state.errors,\n    security:state.security \n});\n\n\nexport default connect(mapStateToProps, { createNewUser })(Register);","import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport classnames from \"classnames\";\nimport {login } from \"../../actions/securityActions\";\n\n\nclass Login extends Component {\n    constructor(){\n        super()\n        this.state = {\n            username:\"\",\n            password:\"\",\n            errors:{}\n        }\n        this.onChange=this.onChange.bind(this);\n        this.onSubmit=this.onSubmit.bind(this);\n\n\n    }\n    onSubmit(e){\n        e.preventDefault();\n        const LoginRequest = {\n            username: this.state.username,\n            password: this.state.password\n        }\n\n        this.props.login(LoginRequest );\n    }\n    onChange(e){\n        this.setState({\n            [e.target.name]:e.target.value\n        })\n    }\n    componentDidMount(){\n        if(this.props.security.validToken){\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n\n    componentWillReceiveProps(nextProps){\n        if(nextProps.security.validToken ){\n            this.props.history.push(\"/dashboard\");\n        }\n        if(nextProps.errors ){\n            this.setState({errors:nextProps.errors });\n        }\n    }\n\n\n    render() {\n        const {errors} = this.state;\n        return (\n            <div className=\"login\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Log In</h1>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input type=\"text\" \n                                    className={classnames(\"form-control form-control-lg\", {\n                                        \"is-invalid\": errors.username\n                                    })} \n                                    \n                                    \n                                    placeholder=\"Email Address\" \n                                    name=\"username\" \n                                    value={this.state.username }\n                                    onChange={this.onChange}\n                                    />\n                                     {\n                                        errors.username && (\n                                            \n                                            <div className=\"invalid-feedback\">{errors.username}</div>\n                                        )\n                                    }\n                                </div>\n                                <div className=\"form-group\">\n                                    <input type=\"password\" \n                                    \n                                    className={classnames(\"form-control form-control-lg\", {\n                                        \"is-invalid\": errors.password\n                                    })}  \n                                    placeholder=\"Password\" \n                                    value={this.state.password }\n                                    onChange={this.onChange}\n                                    name=\"password\" />\n                                    {\n                                        errors.password && (\n                                            \n                                            <div className=\"invalid-feedback\">{errors.password}</div>\n                                        )\n                                    }\n                                </div>\n                                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nLogin.propTypes = {\n    login: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n    security: PropTypes.object.isRequired\n\n}\nconst mapStateToProps = state =>({\n    security: state.security,\n    errors: state.errors\n})\n\nexport default connect(mapStateToProps,{login }) (Login);\n","// import React from 'react';\n// import {Route,Redirect }from \"react-router-dom\";\n// import {connect } from \"react-redux\";\n// import PropTypes from \"prop-types\";\n\n// const SecuredRoute = ({\n//     component:Component, security, ...otherProps})=>(\n//         <Route \n//         {...otherProps} \n//         render={props=> \n//             security.validToken===true?( <Component {...props}/>):(<Redirect to=\"/login\"/>)}/>\n//     );    \n\n// SecuredRoute.propTypes={\n//     security:PropTypes.object.isRequired\n// }\n// const mapStateToProps = state =>({\n//     security:state.security\n// })\n// export default connect(mapStateToProps)(SecuredRoute);\n\n\n\n\n\n\n\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst SecuredRoute = ({ component: Component, security, ...otherProps }) => (\n  <Route\n    {...otherProps}\n    render={props =>\n      security.validToken === true ? (\n        <Component {...props} />\n      ) : (\n        <Redirect to=\"/login\" />\n      )\n    }\n  />\n);\n\nSecuredRoute.propTypes = {\n  security: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  security: state.security\n});\n\nexport default connect(mapStateToProps)(SecuredRoute);\n","import {GET_ERRORS} from \"../actions/types\";\n\n\nconst initialState ={}\n\nexport default function(state = initialState, action){\n    switch(action.type){\n        case GET_ERRORS:\n            return action.payload;\n        \n        default:\n            return state;\n\n    }\n}","import {GET_PROJECTS,GET_PROJECT,DELETE_PROJECT} from \"../actions/types\";\n\nconst initialState = {\n    projects: [],\n    project:{}\n}\n\nexport default function(state = initialState, action){\n    switch(action.type){\n        case GET_PROJECTS:\n            return {\n                ...state,\n                projects:action.payload\n            };\n\n        case GET_PROJECT:\n            return {\n                ...state,\n                project:action.payload\n            };\n        \n        case DELETE_PROJECT:\n            return {\n                ...state,\n                projects: state.projects.filter(\n                    project=>project.projectIdentifier !==action.payload\n                )\n            }; \n        default:\n            return state;\n    }\n}","import { GET_BACKLOG, GET_PROJECT_TASK, DELETE_PROJECT_TASK } from '../actions/types';\n\n\nconst initialState = {\n    project_tasks: [],\n    project_task: {}\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_BACKLOG:\n            return {\n                ...state,\n                project_tasks: action.payload\n            }\n        case GET_PROJECT_TASK:\n            return {\n                ...state,\n                project_task: action.payload\n            }\n        case DELETE_PROJECT_TASK:\n            return {\n                ...state,\n                project_tasks:state.project_tasks.filter(\n                    project_task =>project_task.projectSequence!==action.payload)\n                //TO DO \n                //this will help reload page after delete.\n                //project_task: action.payload\n            }\n\n        default:\n            return state;\n\n    }\n}","import {SET_CURRENT_USER } from \"../actions/types\";\n\n\nconst initialState = {\n    user:{},\n    validToken : false\n}\n\nconst booleanActionPayload = (payload )=>{\n    if(payload ){\n        return true;\n    }else{\n        return false;\n    }\n}\n\nexport default function(state=initialState, action ){\n    switch(action.type){\n        case SET_CURRENT_USER:\n            return {\n                ...state,\n                validToken:booleanActionPayload(action.payload),\n                user:action.payload \n            };\n        \n        default: \n            return state;    \n    }\n}","import {combineReducers} from \"redux\";\nimport errorReducer from \"./errorReducer\";\nimport projectReducer from \"./projectReducer\";\nimport backlogReducer from \"./backlogReducer\";\nimport securityReducer from \"./securityReducer\";\n\n\n\n\nexport default combineReducers({\n    errors: errorReducer,\n    project: projectReducer,\n    backlog: backlogReducer,\n    security: securityReducer\n}); ","import {createStore, applyMiddleware,compose} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from './reducers'\n\n\nconst initialState = {}\nconst middleware = [thunk]\n\nlet store;\n\nconst ReactReduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n\n\nif(window.navigator.userAgent.includes(\"Chrome\")&&ReactReduxDevTools){\n    store = createStore(\n        rootReducer,\n        initialState,\n        compose(\n            applyMiddleware(...middleware),\n            ReactReduxDevTools\n        )\n    )\n} else {\n    store = createStore(\n        rootReducer,\n        initialState,\n        compose(applyMiddleware(...middleware))\n    )\n\n}\n\n\n\nexport default store;","import React from 'react';\nimport './App.css';\n\nimport Dashboard from './components/Dashboard';\nimport Header from './components/layout/Header';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Switch,Route } from \"react-router-dom\"\nimport AddProject from './components/Project/AddProject';\nimport UpdateProject from './components/Project/UpdateProject';\nimport ProjectBoard  from './components/ProjectBoard/ProjectBoard';\nimport AddProjectTask  from './components/ProjectBoard/ProjectTasks/AddProjectTask';\nimport UpdateProjectTask  from './components/ProjectBoard/ProjectTasks/UpdateProjectTask';\nimport Landing from './components/layout/Landing';\nimport Register from './components/UserManagement/Register';\nimport Login from './components/UserManagement/Login';\nimport {logout } from './actions/securityActions';\nimport SecuredRoute from './securityUtils/SecureRoute';\n\n\n\nimport jwt_decode from \"jwt-decode\";\nimport setJWTToken from \"./securityUtils/setJWTToken\";\n\n\nimport { Provider } from \"react-redux\";\nimport store from './store';\nimport { SET_CURRENT_USER } from './actions/types';\n\nconst jwtToken = localStorage.jwtToken;\n\nif(jwtToken){\n  setJWTToken(jwtToken);\n  const decoded_jwtToken = jwt_decode(jwtToken);\n  store.dispatch({\n    type: SET_CURRENT_USER,\n    payload:decoded_jwtToken \n  });\n  const currentTime = Date.now()/1000;\n\n  if(decoded_jwtToken.exp < currentTime){\n    store.dispatch(logout());\n    window.location.href=\"/\";\n  }\n};\n\n\n\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router >\n        <div className=\"App\">\n          <Header />\n          \n\n\n          \n          {/* {<Route exact path=\"\" component={Dashboard}></Route> */} \n          <Switch>\n          {/* <Route exact path=\"/\" component={Dashboard}></Route> */}\n          <Route exact path=\"/\" component={Landing}></Route>\n          <Route exact path=\"/register\" component={Register}></Route>\n          <Route exact path=\"/login\" component={Login}></Route>\n\n          <SecuredRoute exact path=\"/addProject\" component={AddProject}></SecuredRoute>\n          <SecuredRoute exact path=\"/dashboard\" component={Dashboard}></SecuredRoute>\n          <SecuredRoute exact path=\"/updateProject/:id\" component={UpdateProject}></SecuredRoute>\n          <SecuredRoute exact path=\"/projectBoard/:id\" component={ProjectBoard}></SecuredRoute>\n          <SecuredRoute exact path=\"/addProjectTask/:id\" component={AddProjectTask}></SecuredRoute>\n          <SecuredRoute exact path=\"/updateProjectTask/:backlog_id/:pt_id\" component={UpdateProjectTask}></SecuredRoute>\n          <SecuredRoute path=\"/\" component={Landing}></SecuredRoute>\n          {/* <Route path=\"\" component={Landing}></Route> */}\n\n\n          </Switch>\n\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}